* Description
DISCLAIMER:  This is an early version with "works for me" status.  If something
should go wrong, it can be fixed using nix's supplied commands.
The code is adapted from https://gist.github.com/danbst/f07d9760ed15dd844e141177cf7dd478
You might want to keep a copy of your favorite list of packages somewhere...

The main difference is that packages are identified by their attribute names
instead of their derivation names. This makes package update semantics identical
to =nixos-rebuild=.

Note that the installed package collection is handled by =nix-env= at the
moment.  This has the following consequences:

- Calling =nux= creates a new generation of =~/.nix-profile=.
- =nix-env -u= will not upgrade packages installed with =nux=.
- =nix-env --rollback= removes the packages installed by =nux= from the current
  user environment, but not from the list of packages handled by =nux=.
- Packages that are installed with =nix-env -i= and =nux= can collide.

=nux= builds and keeps track of packages in it's own profile, which resides in
=$NIX_USER_PROFILE_DIR/nux=.  All =nux= commands use the package list of the
most recent version of this profile as a basis.  This profile can of course be rolled back
with =nix-env -p --rollback...=, which effectively resets the base list for the next =nux=
command to that of the rolled-back-to generation.

The packages are always taken from the current channel generations.  This has the
following consequences:

- =nux install= always includes a =nux update=

This results in semantics that lie somewhere between
=environment.systemPackages= and =nix-env=.  The intention is to make it easier
to keep user-wide installed packages up-to-date.

* Installation
  There are 2 ways to install nux:

  1. Globally in NixOS with =environment.systemPackages=
  2. Locally per user with =nix-shell -p nux --run 'nux install nixpkgs.nux'=

  Note that the second method ensures that nux itself is not prone to the
  problems of =nix-env=.  If =NIX_PATH= does not contain an entry =nixpkgs=, the
  command must be adjusted accordingly.

  You can also just simply download the =nux= script here, make it executable
  and run it.

* Usage

  The commands that take a list of package attributes (currently 'install' and
  'remove') can be combined with the =-p <entry-in-NIX_PATH>=
  and =-f path-to-package-list-file= command line options.  The =-p= option
  applies to all following package names, and adds the given argument in front of
  the dot, i.e. the top-level path entry in =NIX_PATH=.  So the following two
  lines are equivalent:

  =nux install nixpkgs.hello nixpkgs.htop nixpkgs.zsh foo.mc=

  =nux install nixpkgs.hello -p nixpkgs htop zsh -p foo mc=

  If supplied to =-f=, that file is interpreted as one attribute per line
  (not affected by =-p=).
** Installing packages
   =nux install <pkg>...=

   Note that =<pkg>= takes the same form as the results returned by =nix search=

   =nux install -f package-list-file=

** Other commands
   The other commands are rather self-explanatory.

   #+begin_src sh :results output
     ./nux
   #+end_src

   #+RESULTS:
   #+begin_src
   Command not specified. Try nux install nixpkgs.htop
   Command list: install, uninstall, list, update, dry-update
   #+end_src



* Unaddressed Issues
  - Attributes becoming unavailable in pkgs collection.  Does fail loudly though.
  - Renamed/missing paths in =NIX_PATH=, same as above
  - Duplicate detection, as two attributes from different pkgs collections count
    as different packages.  If they differ, they will collide, which is
    expected, and if they have the same hash, they will only be installed once.
    But if one of them is removed, the package will still not be uninstalled,
    since the other attribute remains in the list.
  - Give details about packages being built/updated
