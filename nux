#!/usr/bin/env bash
set -e

packages=""
passthruArgs=""
action=""
toplevelPath=""
customPackageList=""
pkgsFromFile=""
dryRun=""

dflag=
if [ -n "$DEBUG" ]; then
    dflag="--show-trace"
    set -x
fi

statefile=~/.config/nixpkgs/nux-package-list
envExpr=~/.config/nixpkgs/nux-env.nix
envBuildOutput=~/.config/nixpkgs/.nux-environment
[ -z "$NIX_USER_PROFILE_DIR" ] && { echo "NIX_USER_PROFILE_DIR not set, don't know where to store nux profile"; exit 1; }
profilePath="$NIX_USER_PROFILE_DIR/nux"
currentPackageList="$profilePath/nux-package-list"


# Ensure that we always work from the last working profile, if there is one, if
# not, assume a clean slate
if [ -r "$currentPackageList" ]; then
    cp --no-preserve=mode "$profilePath/nux-package-list" "$statefile"
else
    mkdir -p $(dirname "$statefile")
    truncate -s 0 "$statefile"
fi

function toplevelLetForms {
    IFS=":" read -ra entries <<< "$NIX_PATH"
    local a=$(printf '%s\n' "${entries[@]}" | sed '/=/!d;/nixos-config/d')
    local entry
    local ch
    local path
    for entry in $a ; do
        IFS="=" read ch path <<< "$entry"
        echo "let $ch = import <$ch> { }; in"
    done
}

function checkUpdate {
    nix-build --dry-run "$envExpr" $dflag
}

function buildNuxEnv {
    local packList="$(cat $statefile |sort -u)"
    truncate -s 0 "$envExpr"
    # for ch in $(ls /nix/var/nix/profiles/per-user/root/channels | grep -v -e manifest -e binary-caches) ; do
    cat >> "$envExpr" <<EOF
$(toplevelLetForms)
let
  _pkgs = import <nixpkgs> { };
  packageListFile = _pkgs.writeText "nux-package-list" ''
$packList
  ''; in
      rec { _paths = [
$packList
        ];
      env = _pkgs.buildEnv {
      name = ''nux-environment'';
      paths = _paths;
      postBuild = "cp \${packageListFile} \$out/nux-package-list";
}; }
EOF
    echo "Building new Nux Environment..."
    nix-build "$envExpr" -o "$envBuildOutput" -A env $dflag $passthruArgs
}

function update {
    buildNuxEnv
    echo "Creating new nux profile generation..."
    \nix-env -p "$profilePath" -i "$envBuildOutput" $dflag $passthruArgs && \
        echo "Installing into user profile" && \
        \nix-env -i --from-profile "$profilePath" nux-environment $dflag $passthruArgs && \
        echo "# Updated successfully!" >> "$envExpr"
}

while [ "$#" -gt 0 ]; do
    case "$1" in
        -p) toplevelPath="${2}."; shift 2;;
        -f) customPackageList="$2";
            pkgsFromFile="$(sed -nE 's/^([0-9a-zA-Z._-]+).*/\1/p' $customPackageList)"
            shift 2;;
        -n|--dry-run) dryRun=1; echo "Dry run, not doing anything."; shift 1;;
        -*) passthruArgs+=" $1"; shift 1;;
        *)
            if [ -z "$action" ]; then
                action="$1"
            else
                packages+=" ${toplevelPath}$1"
            fi
            shift 1;;
    esac
done


case "$action" in
install|add)
    [ -n "$packages" ] || [ -n "$customPackageList" ] || { echo "usage: $(basename "$0") install [-f package-list-file] [-p <pkgs>] <attribute>..."; exit 1; }
    for package in $pkgsFromFile $packages; do
        echo "scheduled install for '$package'"
        pname=$(nix eval "($(toplevelLetForms) ${package}.name)" $dflag)
        [ -z "$dryRun" ] &&  echo "$package # $pname" >> "$statefile"
    done
    [ -z "$dryRun" ] && update && echo Success
;;
uninstall|remove|delete)
    for package in $pkgsFromFile $packages; do
        echo "scheduled removal of package '$package'"
        if (grep -Eq "^$package\b" "$statefile"); then
            [ -z "$dryRun" ] && sed -i "/^$package\b/d" $statefile
        else
            echo "Not installed: '$package'"
            exit 1;
        fi
    done
    update && echo "Success"
;;
list)
    cat "$statefile"
;;
update)
    if update; then
        echo "Success"
    else
        echo "Failed"
    fi
;;
dry-update)
    echo Running dry-build
    checkUpdate
;;
*)
    echo Command not specified. Try $(basename "$0") install nixpkgs.htop
    echo Command list: install, uninstall, list, update, dry-update
;;
esac
set +x
