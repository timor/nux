#!/usr/bin/env bash
set -e
statefile=~/.config/nixpkgs/nux-package-list
envExpr=~/.config/nixpkgs/nux-env.nix
[ -z "$NIX_USER_PROFILE_DIR" ] && { echo "NIX_USER_PROFILE_DIR not set, don't know where to store nux profile"; exit 1; }
profilePath="$NIX_USER_PROFILE_DIR/nux"
currentPackageList="$profilePath/nux-package-list"


action="$1"
package="$2"

# Ensure that we always work from the last working profile, if there is one
if [ -r "$currentPackageList" ]; then
    cp --no-preserve=mode "$profilePath/nux-package-list" "$statefile"
else
    mkdir -p $(dirname "$statefile")
    touch "$statefile"
fi

function toplevelLetForms {
    IFS=":" read -ra entries <<< "$NIX_PATH"
    local a=$(printf '%s\n' "${entries[@]}" | sed '/=/!d;/nixos-config/d')
    local entry
    local ch
    local path
    for entry in $a ; do
        IFS="=" read ch path <<< "$entry"
        echo "let $ch = import <$ch> { }; in"
    done
}

function checkUpdate {
    nix-build --dry-run "$envExpr"
}

function update {
  local packList="$(cat $statefile |sort -u)"
  truncate -s 0 "$envExpr"
  # for ch in $(ls /nix/var/nix/profiles/per-user/root/channels | grep -v -e manifest -e binary-caches) ; do
  cat >> "$envExpr" <<EOF
$(toplevelLetForms)
let
  _pkgs = import <nixpkgs> { };
  packageListFile = _pkgs.writeText "nux-package-list" ''
$packList
  ''; in
      rec { _paths = [
$packList
        ];
      env = _pkgs.buildEnv {
      name = ''nux-environment'';
      paths = _paths;
      postBuild = "cp \${packageListFile} \$out/nux-package-list";
}; }
EOF
  echo "Building new nux profile generation"
  \nix-env -p "$profilePath" -if "$envExpr" -A env && \
      echo "Installing into user profile" && \
      \nix-env -i --from-profile "$profilePath" nux-environment && \
      echo "# Updated successfully!" >> "$envExpr"
}

case "$action" in
install|add)
    [ -n "$package" ] || { echo "usage: $(basename "$0") install <pkgs>.<attribute>"; exit 1; }
    echo "scheduled install'n'update"
    pname=$(nix eval "($(toplevelLetForms) $package.name)")
    echo "$package # $pname" >> "$statefile"
    # TODO: trap
    update && \
        echo Success
;;
uninstall|remove|delete)
    if (grep -Eq "^$package #" "$statefile"); then
        sed -i "/^$package #/d" $statefile
        update && echo "Success"
    else
        echo Not installed
    fi
;;
list)
    cat "$statefile"
;;
update)
    if update; then
        echo "Success"
    else
        echo "Failed"
    fi
;;
dry-update)
    echo Running dry-build
    checkUpdate
;;
replace)
    echo Replacing package set
    newPackageList="$2"
    if [ -r "$newPackageList" ]; then
        cp --no-preserve=mode "$newPackageList" "$statefile"
        update
    else
        echo "Cannot read from file '$newPackageList'"
        exit 1
    fi
;;
*)
    echo Command not specified. Try $(basename "$0") install nixpkgs.htop
    echo Command list: install, uninstall, list, update, dry-update, replace
;;
esac
